//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (d6084cd1) on 2021-06-14 16:01:24
//--------------------------------------------------------------------------------
module top(
	input wire sys_clk,
	input wire sys_rst,
	input wire gpio_gpio_0,
	input wire gpio_gpio_1,
	output wire pwm_out,
	input wire qei_a,
	input wire qei_b,
	input wire qei_i,
	output reg stepper0_step,
	output reg stepper0_dir,
	output reg uartbone_tx,
	input wire uartbone_rx,
	output reg pwm,
	input wire [29:0] wb_adr,
	input wire [31:0] wb_dat_w,
	output wire [31:0] wb_dat_r,
	input wire [3:0] wb_sel,
	input wire wb_cyc,
	input wire wb_stb,
	output wire wb_ack,
	input wire wb_we,
	input wire [2:0] wb_cti,
	input wire [1:0] wb_bte,
	output wire wb_err
);

wire sys_clk_1;
wire sys_rst_1;
wire por_clk;
reg main_int_rst = 1'd1;
reg [15:0] main_pwmperipheral_period_storage = 16'd0;
reg [15:0] main_pwmperipheral_duty_cycle_storage = 16'd0;
reg [15:0] main_pwmperipheral_cnt = 16'd0;
wire main_pwmperipheral_out;
reg main_pwmperipheral_up_cnt = 1'd1;
wire main_pwmperipheral_cycle_update;
reg [15:0] main_pwmperipheral_duty_cycle = 16'd0;
reg [15:0] main_qei_cnt = 16'd0;
reg [2:0] main_qei_a_f = 3'd0;
reg [2:0] main_qei_b_f = 3'd0;
reg main_qei_a = 1'd0;
reg main_qei_b = 1'd0;
reg [2:0] main_qei_i_f = 3'd0;
reg main_qei_i = 1'd0;
reg [15:0] main_qei_index_cnt = 16'd0;
wire [15:0] main_qei_cnt_status;
wire main_qei_cnt_we;
reg main_qei_cnt_re = 1'd0;
wire [15:0] main_qei_index_cnt_status;
wire main_qei_index_cnt_we;
reg main_qei_index_cnt_re = 1'd0;
reg main_motiongeneratoraxis_sink_valid = 1'd0;
wire main_motiongeneratoraxis_sink_ready;
wire signed [19:0] main_motiongeneratoraxis_sink_payload_target_position;
wire signed [19:0] main_motiongeneratoraxis_sink_payload_start_speed;
wire signed [19:0] main_motiongeneratoraxis_sink_payload_acceleration;
wire main_motiongeneratoraxis_flush;
reg signed [19:0] main_motiongeneratoraxis_acceleration = 20'd0;
reg signed [19:0] main_motiongeneratoraxis_target_position = 20'd0;
reg signed [19:0] main_motiongeneratoraxis_cnt = 20'd0;
reg signed [19:0] main_motiongeneratoraxis_position = 20'd0;
reg signed [39:0] main_motiongeneratoraxis_speed_raw = 40'd0;
wire [19:0] main_motiongeneratoraxis_speed;
wire signed [19:0] main_motiongeneratoraxis_C;
wire main_motiongeneratoraxis_overflow;
wire main_motiongeneratoraxis_underflow;
wire [20:0] main_motiongeneratoraxis_A_extended;
wire [20:0] main_motiongeneratoraxis_B_extended;
wire [20:0] main_motiongeneratoraxis_C_extended;
wire main_motiongeneratoraxis_down;
wire main_motiongeneratoraxis_up;
wire main_motiongeneratoraxis_done;
wire main_up_cmd;
wire main_down_cmd;
wire [1:0] main_mode;
wire main_invert_step;
wire main_invert_dir;
reg [4:0] main_storage = 5'd0;
reg main_re = 1'd0;
reg main_step = 1'd0;
reg main_dir = 1'd0;
reg [1:0] main_quad = 2'd0;
reg [4:0] main_step_pulse = 5'd0;
reg [3:0] main_dir_t = 4'd1;
wire [19:0] main_position_status;
wire main_position_we;
reg main_position_re = 1'd0;
reg [19:0] main_home_position_status = 20'd0;
wire main_home_position_we;
reg main_home_position_re = 1'd0;
wire [19:0] main_speed_status;
wire main_speed_we;
reg main_speed_re = 1'd0;
reg [19:0] main_target_position_storage = 20'd0;
reg main_target_position_re = 1'd0;
reg [19:0] main_start_speed_storage = 20'd0;
reg main_start_speed_re = 1'd0;
reg [19:0] main_acceleration_storage = 20'd0;
reg main_acceleration_re = 1'd0;
reg main_axis_x_push = 1'd0;
reg main_axis_x_home_done = 1'd0;
reg main_axis_x_flush = 1'd0;
wire main_axis_x_done;
wire main_axis_x_ready;
wire main_axis_x_sync;
reg main_push_motion_storage = 1'd0;
reg main_push_motion_re = 1'd0;
wire main_home_done_status;
wire main_home_done_we;
reg main_home_done_re = 1'd0;
reg main_flush_storage = 1'd0;
reg main_flush_re = 1'd0;
wire main_done_status;
wire main_done_we;
reg main_done_re = 1'd0;
wire main_ready_status;
wire main_ready_we;
reg main_ready_re = 1'd0;
reg main_sync_axis_storage = 1'd0;
reg main_sync_axis_re = 1'd0;
wire main_all_sync;
reg main_motion_valid = 1'd0;
reg main_motsoc_tx_sink_valid = 1'd0;
reg main_motsoc_tx_sink_ready = 1'd0;
wire main_motsoc_tx_sink_last;
reg [7:0] main_motsoc_tx_sink_payload_data = 8'd0;
reg [7:0] main_motsoc_tx_data = 8'd0;
reg [3:0] main_motsoc_tx_count = 4'd0;
reg main_motsoc_tx_enable = 1'd0;
reg [31:0] main_motsoc_tx_tick = 32'd0;
reg [31:0] main_motsoc_tx_phase = 32'd0;
reg main_motsoc_rx_source_valid = 1'd0;
reg main_motsoc_rx_source_ready = 1'd0;
reg [7:0] main_motsoc_rx_source_payload_data = 8'd0;
reg [7:0] main_motsoc_rx_data = 8'd0;
reg [3:0] main_motsoc_rx_count = 4'd0;
reg main_motsoc_rx_enable = 1'd0;
reg [31:0] main_motsoc_rx_tick = 32'd0;
reg [31:0] main_motsoc_rx_phase = 32'd0;
wire main_motsoc_rx_rx;
reg main_motsoc_rx_rx_d = 1'd0;
wire [29:0] main_motsoc_wishbone_adr;
wire [31:0] main_motsoc_wishbone_dat_w;
wire [31:0] main_motsoc_wishbone_dat_r;
wire [3:0] main_motsoc_wishbone_sel;
reg main_motsoc_wishbone_cyc = 1'd0;
reg main_motsoc_wishbone_stb = 1'd0;
wire main_motsoc_wishbone_ack;
reg main_motsoc_wishbone_we = 1'd0;
reg [2:0] main_motsoc_wishbone_cti = 3'd0;
reg [1:0] main_motsoc_wishbone_bte = 2'd0;
wire main_motsoc_wishbone_err;
reg [7:0] main_motsoc_cmd = 8'd0;
reg main_motsoc_incr = 1'd0;
reg [7:0] main_motsoc_length = 8'd0;
reg [31:0] main_motsoc_address = 32'd0;
reg [31:0] main_motsoc_data = 32'd0;
reg [1:0] main_motsoc_bytes_count = 2'd0;
reg [7:0] main_motsoc_words_count = 8'd0;
wire main_motsoc_reset;
wire main_motsoc_wait;
wire main_motsoc_done;
reg [22:0] main_motsoc_count = 23'd5000000;
reg main_motsoc_is_ongoing = 1'd0;
wire main_pwm_enable;
wire [31:0] main_pwm_width;
wire [31:0] main_pwm_period;
reg [31:0] main_pwm_counter = 32'd0;
reg main_pwm_enable_storage = 1'd0;
reg main_pwm_enable_re = 1'd0;
reg [31:0] main_pwm_width_storage = 32'd0;
reg main_pwm_width_re = 1'd0;
reg [31:0] main_pwm_period_storage = 32'd0;
reg main_pwm_period_re = 1'd0;
wire [29:0] main_wb_bus_adr;
wire [31:0] main_wb_bus_dat_w;
wire [31:0] main_wb_bus_dat_r;
wire [3:0] main_wb_bus_sel;
wire main_wb_bus_cyc;
wire main_wb_bus_stb;
wire main_wb_bus_ack;
wire main_wb_bus_we;
wire [2:0] main_wb_bus_cti;
wire [1:0] main_wb_bus_bte;
wire main_wb_bus_err;
reg [1:0] builder_stepper_state = 2'd0;
reg [1:0] builder_stepper_next_state = 2'd0;
reg [3:0] main_dir_t_stepper_next_value0 = 4'd0;
reg main_dir_t_stepper_next_value_ce0 = 1'd0;
reg [4:0] main_step_pulse_stepper_next_value1 = 5'd0;
reg main_step_pulse_stepper_next_value_ce1 = 1'd0;
reg builder_rs232phytx_state = 1'd0;
reg builder_rs232phytx_next_state = 1'd0;
reg [3:0] main_motsoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg main_motsoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg main_motsoc_uartbone_tx_rs232phytx_next_value1 = 1'd0;
reg main_motsoc_uartbone_tx_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] main_motsoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg main_motsoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg builder_rs232phyrx_state = 1'd0;
reg builder_rs232phyrx_next_state = 1'd0;
reg [3:0] main_motsoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg main_motsoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] main_motsoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg main_motsoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg [2:0] builder_uartbone_state = 3'd0;
reg [2:0] builder_uartbone_next_state = 3'd0;
reg [1:0] main_motsoc_bytes_count_uartbone_next_value0 = 2'd0;
reg main_motsoc_bytes_count_uartbone_next_value_ce0 = 1'd0;
reg [7:0] main_motsoc_words_count_uartbone_next_value1 = 8'd0;
reg main_motsoc_words_count_uartbone_next_value_ce1 = 1'd0;
reg [7:0] main_motsoc_cmd_uartbone_next_value2 = 8'd0;
reg main_motsoc_cmd_uartbone_next_value_ce2 = 1'd0;
reg [7:0] main_motsoc_length_uartbone_next_value3 = 8'd0;
reg main_motsoc_length_uartbone_next_value_ce3 = 1'd0;
reg [31:0] main_motsoc_address_uartbone_next_value4 = 32'd0;
reg main_motsoc_address_uartbone_next_value_ce4 = 1'd0;
reg main_motsoc_incr_uartbone_next_value5 = 1'd0;
reg main_motsoc_incr_uartbone_next_value_ce5 = 1'd0;
reg [31:0] main_motsoc_data_uartbone_next_value6 = 32'd0;
reg main_motsoc_data_uartbone_next_value_ce6 = 1'd0;
reg [13:0] builder_motsoc_adr = 14'd0;
reg builder_motsoc_we = 1'd0;
reg [31:0] builder_motsoc_dat_w = 32'd0;
wire [31:0] builder_motsoc_dat_r;
wire [29:0] builder_motsoc_wishbone_adr;
wire [31:0] builder_motsoc_wishbone_dat_w;
reg [31:0] builder_motsoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_motsoc_wishbone_sel;
wire builder_motsoc_wishbone_cyc;
wire builder_motsoc_wishbone_stb;
reg builder_motsoc_wishbone_ack = 1'd0;
wire builder_motsoc_wishbone_we;
wire [2:0] builder_motsoc_wishbone_cti;
wire [1:0] builder_motsoc_wishbone_bte;
reg builder_motsoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg builder_grant = 1'd0;
wire builder_slave_sel;
reg builder_slave_sel_r = 1'd0;
reg builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg [19:0] builder_count = 20'd1000000;
wire [13:0] builder_interface0_bank_bus_adr;
wire builder_interface0_bank_bus_we;
wire [31:0] builder_interface0_bank_bus_dat_w;
reg [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
reg builder_csrbank0_stepper_x0_re = 1'd0;
wire [4:0] builder_csrbank0_stepper_x0_r;
reg builder_csrbank0_stepper_x0_we = 1'd0;
wire [4:0] builder_csrbank0_stepper_x0_w;
wire builder_csrbank0_sel;
wire [13:0] builder_interface1_bank_bus_adr;
wire builder_interface1_bank_bus_we;
wire [31:0] builder_interface1_bank_bus_dat_w;
reg [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
reg builder_csrbank1_axis_x_position_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_position_r;
reg builder_csrbank1_axis_x_position_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_position_w;
reg builder_csrbank1_axis_x_home_position_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_home_position_r;
reg builder_csrbank1_axis_x_home_position_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_home_position_w;
reg builder_csrbank1_axis_x_speed_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_speed_r;
reg builder_csrbank1_axis_x_speed_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_speed_w;
reg builder_csrbank1_axis_x_target_position0_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_target_position0_r;
reg builder_csrbank1_axis_x_target_position0_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_target_position0_w;
reg builder_csrbank1_axis_x_start_speed0_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_start_speed0_r;
reg builder_csrbank1_axis_x_start_speed0_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_start_speed0_w;
reg builder_csrbank1_axis_x_acceleration0_re = 1'd0;
wire [19:0] builder_csrbank1_axis_x_acceleration0_r;
reg builder_csrbank1_axis_x_acceleration0_we = 1'd0;
wire [19:0] builder_csrbank1_axis_x_acceleration0_w;
reg builder_csrbank1_push_motion0_re = 1'd0;
wire builder_csrbank1_push_motion0_r;
reg builder_csrbank1_push_motion0_we = 1'd0;
wire builder_csrbank1_push_motion0_w;
reg builder_csrbank1_home_done_re = 1'd0;
wire builder_csrbank1_home_done_r;
reg builder_csrbank1_home_done_we = 1'd0;
wire builder_csrbank1_home_done_w;
reg builder_csrbank1_flush0_re = 1'd0;
wire builder_csrbank1_flush0_r;
reg builder_csrbank1_flush0_we = 1'd0;
wire builder_csrbank1_flush0_w;
reg builder_csrbank1_done_re = 1'd0;
wire builder_csrbank1_done_r;
reg builder_csrbank1_done_we = 1'd0;
wire builder_csrbank1_done_w;
reg builder_csrbank1_ready_re = 1'd0;
wire builder_csrbank1_ready_r;
reg builder_csrbank1_ready_we = 1'd0;
wire builder_csrbank1_ready_w;
reg builder_csrbank1_sync_axis0_re = 1'd0;
wire builder_csrbank1_sync_axis0_r;
reg builder_csrbank1_sync_axis0_we = 1'd0;
wire builder_csrbank1_sync_axis0_w;
wire builder_csrbank1_sel;
wire [13:0] builder_interface2_bank_bus_adr;
wire builder_interface2_bank_bus_we;
wire [31:0] builder_interface2_bank_bus_dat_w;
reg [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
reg builder_csrbank2_enable0_re = 1'd0;
wire builder_csrbank2_enable0_r;
reg builder_csrbank2_enable0_we = 1'd0;
wire builder_csrbank2_enable0_w;
reg builder_csrbank2_width0_re = 1'd0;
wire [31:0] builder_csrbank2_width0_r;
reg builder_csrbank2_width0_we = 1'd0;
wire [31:0] builder_csrbank2_width0_w;
reg builder_csrbank2_period0_re = 1'd0;
wire [31:0] builder_csrbank2_period0_r;
reg builder_csrbank2_period0_we = 1'd0;
wire [31:0] builder_csrbank2_period0_w;
wire builder_csrbank2_sel;
wire [13:0] builder_interface3_bank_bus_adr;
wire builder_interface3_bank_bus_we;
wire [31:0] builder_interface3_bank_bus_dat_w;
reg [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
reg builder_csrbank3_cnt_re = 1'd0;
wire [15:0] builder_csrbank3_cnt_r;
reg builder_csrbank3_cnt_we = 1'd0;
wire [15:0] builder_csrbank3_cnt_w;
reg builder_csrbank3_index_cnt_re = 1'd0;
wire [15:0] builder_csrbank3_index_cnt_r;
reg builder_csrbank3_index_cnt_we = 1'd0;
wire [15:0] builder_csrbank3_index_cnt_w;
wire builder_csrbank3_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg builder_state = 1'd0;
reg builder_next_state = 1'd0;
reg [29:0] builder_array_muxed0 = 30'd0;
reg [31:0] builder_array_muxed1 = 32'd0;
reg [3:0] builder_array_muxed2 = 4'd0;
reg builder_array_muxed3 = 1'd0;
reg builder_array_muxed4 = 1'd0;
reg builder_array_muxed5 = 1'd0;
reg [2:0] builder_array_muxed6 = 3'd0;
reg [1:0] builder_array_muxed7 = 2'd0;
(* no_retiming = "true" *) reg builder_regs0 = 1'd0;
(* no_retiming = "true" *) reg builder_regs1 = 1'd0;

assign main_wb_bus_adr = wb_adr;
assign main_wb_bus_dat_w = wb_dat_w;
assign wb_dat_r = main_wb_bus_dat_r;
assign main_wb_bus_sel = wb_sel;
assign main_wb_bus_cyc = wb_cyc;
assign main_wb_bus_stb = wb_stb;
assign wb_ack = main_wb_bus_ack;
assign main_wb_bus_we = wb_we;
assign main_wb_bus_cti = wb_cti;
assign main_wb_bus_bte = wb_bte;
assign wb_err = main_wb_bus_err;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst_1 = main_int_rst;
assign pwm_out = main_pwmperipheral_out;
assign main_pwmperipheral_cycle_update = ((main_pwmperipheral_cnt == 1'd0) | (1'd0 & (main_pwmperipheral_cnt == main_pwmperipheral_duty_cycle)));
assign main_pwmperipheral_out = (main_pwmperipheral_duty_cycle > main_pwmperipheral_cnt);
assign main_qei_cnt_status = main_qei_cnt;
assign main_qei_index_cnt_status = main_qei_index_cnt;
assign main_motiongeneratoraxis_up = main_motiongeneratoraxis_overflow;
assign main_motiongeneratoraxis_down = main_motiongeneratoraxis_underflow;
assign main_motiongeneratoraxis_speed = main_motiongeneratoraxis_speed_raw[39:20];
assign main_motiongeneratoraxis_done = (main_motiongeneratoraxis_position == main_motiongeneratoraxis_target_position);
assign main_motiongeneratoraxis_sink_ready = main_motiongeneratoraxis_done;
assign main_motiongeneratoraxis_A_extended = {main_motiongeneratoraxis_cnt[19], main_motiongeneratoraxis_cnt};
assign main_motiongeneratoraxis_B_extended = {main_motiongeneratoraxis_speed[19], main_motiongeneratoraxis_speed};
assign main_motiongeneratoraxis_C_extended = (main_motiongeneratoraxis_A_extended + main_motiongeneratoraxis_B_extended);
assign main_motiongeneratoraxis_overflow = (main_motiongeneratoraxis_C_extended[20:19] == 2'd1);
assign main_motiongeneratoraxis_underflow = (main_motiongeneratoraxis_C_extended[20:19] == 2'd2);
assign main_motiongeneratoraxis_C = main_motiongeneratoraxis_C_extended[19:0];
always @(*) begin
	stepper0_dir <= 1'd0;
	stepper0_step <= 1'd0;
	if ((main_mode == 1'd0)) begin
		stepper0_step <= (main_step ^ main_invert_step);
		stepper0_dir <= (main_dir ^ main_invert_dir);
	end else begin
		if ((main_mode == 1'd1)) begin
			stepper0_step <= (main_step ^ main_invert_step);
			stepper0_dir <= (main_dir ^ main_invert_dir);
		end else begin
			if ((main_mode == 2'd2)) begin
				stepper0_step <= ((main_step & main_dir) ^ main_invert_step);
				stepper0_dir <= ((main_step & (~main_dir)) ^ main_invert_dir);
			end else begin
				if ((main_mode == 2'd3)) begin
					stepper0_step <= main_quad[0];
					stepper0_dir <= main_quad[1];
				end
			end
		end
	end
end
assign main_up_cmd = main_motiongeneratoraxis_up;
assign main_down_cmd = main_motiongeneratoraxis_down;
always @(*) begin
	main_step_pulse_stepper_next_value1 <= 5'd0;
	main_step_pulse_stepper_next_value_ce1 <= 1'd0;
	main_step <= 1'd0;
	builder_stepper_next_state <= 2'd0;
	main_dir_t_stepper_next_value0 <= 4'd0;
	main_dir <= 1'd0;
	main_dir_t_stepper_next_value_ce0 <= 1'd0;
	builder_stepper_next_state <= builder_stepper_state;
	case (builder_stepper_state)
		1'd1: begin
			main_dir <= 1'd0;
			main_step <= (main_step_pulse != 1'd0);
			if (main_up_cmd) begin
				builder_stepper_next_state <= 2'd2;
				main_dir_t_stepper_next_value0 <= 4'd15;
				main_dir_t_stepper_next_value_ce0 <= 1'd1;
				main_step_pulse_stepper_next_value1 <= 5'd20;
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end
			if (main_step_pulse) begin
				main_step_pulse_stepper_next_value1 <= (main_step_pulse - 1'd1);
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end else begin
				if (main_down_cmd) begin
					main_step_pulse_stepper_next_value1 <= 5'd20;
					main_step_pulse_stepper_next_value_ce1 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_dir <= 1'd1;
			main_step <= 1'd0;
			if (main_down_cmd) begin
				builder_stepper_next_state <= 1'd0;
				main_dir_t_stepper_next_value0 <= 4'd15;
				main_dir_t_stepper_next_value_ce0 <= 1'd1;
				main_step_pulse_stepper_next_value1 <= 5'd20;
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end else begin
				if ((main_dir_t == 1'd0)) begin
					builder_stepper_next_state <= 2'd3;
				end else begin
					main_dir_t_stepper_next_value0 <= (main_dir_t - 1'd1);
					main_dir_t_stepper_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd3: begin
			main_dir <= 1'd1;
			main_step <= (main_step_pulse != 1'd0);
			if (main_down_cmd) begin
				builder_stepper_next_state <= 1'd0;
				main_dir_t_stepper_next_value0 <= 4'd15;
				main_dir_t_stepper_next_value_ce0 <= 1'd1;
				main_step_pulse_stepper_next_value1 <= 5'd20;
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end
			if (main_step_pulse) begin
				main_step_pulse_stepper_next_value1 <= (main_step_pulse - 1'd1);
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end else begin
				if (main_up_cmd) begin
					main_step_pulse_stepper_next_value1 <= 5'd20;
					main_step_pulse_stepper_next_value_ce1 <= 1'd1;
				end
			end
		end
		default: begin
			main_dir <= 1'd0;
			main_step <= 1'd0;
			if (main_up_cmd) begin
				builder_stepper_next_state <= 2'd2;
				main_dir_t_stepper_next_value0 <= 4'd15;
				main_dir_t_stepper_next_value_ce0 <= 1'd1;
				main_step_pulse_stepper_next_value1 <= 5'd20;
				main_step_pulse_stepper_next_value_ce1 <= 1'd1;
			end else begin
				if ((main_dir_t == 1'd0)) begin
					builder_stepper_next_state <= 1'd1;
				end else begin
					main_dir_t_stepper_next_value0 <= (main_dir_t - 1'd1);
					main_dir_t_stepper_next_value_ce0 <= 1'd1;
				end
			end
		end
	endcase
end
assign main_motiongeneratoraxis_sink_payload_target_position = main_target_position_storage;
assign main_motiongeneratoraxis_sink_payload_start_speed = main_start_speed_storage;
assign main_motiongeneratoraxis_sink_payload_acceleration = main_acceleration_storage;
assign main_position_status = main_motiongeneratoraxis_position;
assign main_speed_status = main_motiongeneratoraxis_speed;
assign main_all_sync = ({main_motiongeneratoraxis_sink_ready} == main_sync_axis_storage);
always @(*) begin
	main_motiongeneratoraxis_sink_valid <= 1'd0;
	if (main_axis_x_sync) begin
		main_motiongeneratoraxis_sink_valid <= (main_all_sync & main_motion_valid);
	end else begin
		main_motiongeneratoraxis_sink_valid <= main_motion_valid;
	end
end
assign main_motiongeneratoraxis_flush = main_axis_x_flush;
assign main_axis_x_ready = (~main_motiongeneratoraxis_sink_valid);
assign main_axis_x_done = (main_motiongeneratoraxis_sink_ready & main_axis_x_ready);
always @(*) begin
	main_motsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	main_motsoc_uartbone_tx_rs232phytx_next_value1 <= 1'd0;
	main_motsoc_uartbone_tx_rs232phytx_next_value_ce1 <= 1'd0;
	main_motsoc_tx_enable <= 1'd0;
	main_motsoc_tx_data_rs232phytx_next_value2 <= 8'd0;
	main_motsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	main_motsoc_tx_sink_ready <= 1'd0;
	builder_rs232phytx_next_state <= 1'd0;
	main_motsoc_tx_count_rs232phytx_next_value0 <= 4'd0;
	builder_rs232phytx_next_state <= builder_rs232phytx_state;
	case (builder_rs232phytx_state)
		1'd1: begin
			main_motsoc_tx_enable <= 1'd1;
			if (main_motsoc_tx_tick) begin
				main_motsoc_uartbone_tx_rs232phytx_next_value1 <= main_motsoc_tx_data;
				main_motsoc_uartbone_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_motsoc_tx_count_rs232phytx_next_value0 <= (main_motsoc_tx_count + 1'd1);
				main_motsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				main_motsoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_motsoc_tx_data[7:1]};
				main_motsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((main_motsoc_tx_count == 4'd9)) begin
					main_motsoc_tx_sink_ready <= 1'd1;
					builder_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_motsoc_tx_count_rs232phytx_next_value0 <= 1'd0;
			main_motsoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			main_motsoc_uartbone_tx_rs232phytx_next_value1 <= 1'd1;
			main_motsoc_uartbone_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (main_motsoc_tx_sink_valid) begin
				main_motsoc_uartbone_tx_rs232phytx_next_value1 <= 1'd0;
				main_motsoc_uartbone_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_motsoc_tx_data_rs232phytx_next_value2 <= main_motsoc_tx_sink_payload_data;
				main_motsoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				builder_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_motsoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
	main_motsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	main_motsoc_rx_source_payload_data <= 8'd0;
	main_motsoc_rx_enable <= 1'd0;
	main_motsoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
	main_motsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	main_motsoc_rx_source_valid <= 1'd0;
	builder_rs232phyrx_next_state <= 1'd0;
	builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
	case (builder_rs232phyrx_state)
		1'd1: begin
			main_motsoc_rx_enable <= 1'd1;
			if (main_motsoc_rx_tick) begin
				main_motsoc_rx_count_rs232phyrx_next_value0 <= (main_motsoc_rx_count + 1'd1);
				main_motsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				main_motsoc_rx_data_rs232phyrx_next_value1 <= {main_motsoc_rx_rx, main_motsoc_rx_data[7:1]};
				main_motsoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((main_motsoc_rx_count == 4'd9)) begin
					main_motsoc_rx_source_valid <= (main_motsoc_rx_rx == 1'd1);
					main_motsoc_rx_source_payload_data <= main_motsoc_rx_data;
					builder_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_motsoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
			main_motsoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((main_motsoc_rx_rx == 1'd0) & (main_motsoc_rx_rx_d == 1'd1))) begin
				builder_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_motsoc_wait = (~main_motsoc_is_ongoing);
assign main_motsoc_reset = main_motsoc_done;
assign main_motsoc_wishbone_adr = main_motsoc_address;
assign main_motsoc_wishbone_dat_w = main_motsoc_data;
assign main_motsoc_wishbone_sel = 4'd15;
always @(*) begin
	main_motsoc_tx_sink_payload_data <= 8'd0;
	case (main_motsoc_bytes_count)
		1'd0: begin
			main_motsoc_tx_sink_payload_data <= main_motsoc_data[31:24];
		end
		1'd1: begin
			main_motsoc_tx_sink_payload_data <= main_motsoc_data[31:16];
		end
		2'd2: begin
			main_motsoc_tx_sink_payload_data <= main_motsoc_data[31:8];
		end
		2'd3: begin
			main_motsoc_tx_sink_payload_data <= main_motsoc_data[31:0];
		end
	endcase
end
assign main_motsoc_tx_sink_last = ((main_motsoc_bytes_count == 2'd3) & (main_motsoc_words_count == (main_motsoc_length - 1'd1)));
always @(*) begin
	main_motsoc_incr_uartbone_next_value_ce5 <= 1'd0;
	main_motsoc_data_uartbone_next_value6 <= 32'd0;
	main_motsoc_data_uartbone_next_value_ce6 <= 1'd0;
	main_motsoc_tx_sink_valid <= 1'd0;
	builder_uartbone_next_state <= 3'd0;
	main_motsoc_bytes_count_uartbone_next_value0 <= 2'd0;
	main_motsoc_is_ongoing <= 1'd0;
	main_motsoc_bytes_count_uartbone_next_value_ce0 <= 1'd0;
	main_motsoc_words_count_uartbone_next_value1 <= 8'd0;
	main_motsoc_words_count_uartbone_next_value_ce1 <= 1'd0;
	main_motsoc_cmd_uartbone_next_value2 <= 8'd0;
	main_motsoc_cmd_uartbone_next_value_ce2 <= 1'd0;
	main_motsoc_length_uartbone_next_value3 <= 8'd0;
	main_motsoc_wishbone_cyc <= 1'd0;
	main_motsoc_length_uartbone_next_value_ce3 <= 1'd0;
	main_motsoc_wishbone_stb <= 1'd0;
	main_motsoc_address_uartbone_next_value4 <= 32'd0;
	main_motsoc_wishbone_we <= 1'd0;
	main_motsoc_address_uartbone_next_value_ce4 <= 1'd0;
	main_motsoc_rx_source_ready <= 1'd0;
	main_motsoc_incr_uartbone_next_value5 <= 1'd0;
	builder_uartbone_next_state <= builder_uartbone_state;
	case (builder_uartbone_state)
		1'd1: begin
			main_motsoc_rx_source_ready <= 1'd1;
			if (main_motsoc_rx_source_valid) begin
				main_motsoc_length_uartbone_next_value3 <= main_motsoc_rx_source_payload_data;
				main_motsoc_length_uartbone_next_value_ce3 <= 1'd1;
				builder_uartbone_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_motsoc_rx_source_ready <= 1'd1;
			if (main_motsoc_rx_source_valid) begin
				main_motsoc_address_uartbone_next_value4 <= {main_motsoc_address, main_motsoc_rx_source_payload_data};
				main_motsoc_address_uartbone_next_value_ce4 <= 1'd1;
				main_motsoc_bytes_count_uartbone_next_value0 <= (main_motsoc_bytes_count + 1'd1);
				main_motsoc_bytes_count_uartbone_next_value_ce0 <= 1'd1;
				if ((main_motsoc_bytes_count == 2'd3)) begin
					if (((main_motsoc_cmd == 1'd1) | (main_motsoc_cmd == 2'd3))) begin
						main_motsoc_incr_uartbone_next_value5 <= (main_motsoc_cmd == 1'd1);
						main_motsoc_incr_uartbone_next_value_ce5 <= 1'd1;
						builder_uartbone_next_state <= 2'd3;
					end else begin
						if (((main_motsoc_cmd == 2'd2) | (main_motsoc_cmd == 3'd4))) begin
							main_motsoc_incr_uartbone_next_value5 <= (main_motsoc_cmd == 2'd2);
							main_motsoc_incr_uartbone_next_value_ce5 <= 1'd1;
							builder_uartbone_next_state <= 3'd5;
						end else begin
							builder_uartbone_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd3: begin
			main_motsoc_rx_source_ready <= 1'd1;
			if (main_motsoc_rx_source_valid) begin
				main_motsoc_data_uartbone_next_value6 <= {main_motsoc_data, main_motsoc_rx_source_payload_data};
				main_motsoc_data_uartbone_next_value_ce6 <= 1'd1;
				main_motsoc_bytes_count_uartbone_next_value0 <= (main_motsoc_bytes_count + 1'd1);
				main_motsoc_bytes_count_uartbone_next_value_ce0 <= 1'd1;
				if ((main_motsoc_bytes_count == 2'd3)) begin
					builder_uartbone_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			main_motsoc_rx_source_ready <= 1'd0;
			main_motsoc_wishbone_stb <= 1'd1;
			main_motsoc_wishbone_we <= 1'd1;
			main_motsoc_wishbone_cyc <= 1'd1;
			if (main_motsoc_wishbone_ack) begin
				main_motsoc_words_count_uartbone_next_value1 <= (main_motsoc_words_count + 1'd1);
				main_motsoc_words_count_uartbone_next_value_ce1 <= 1'd1;
				main_motsoc_address_uartbone_next_value4 <= (main_motsoc_address + main_motsoc_incr);
				main_motsoc_address_uartbone_next_value_ce4 <= 1'd1;
				if ((main_motsoc_words_count == (main_motsoc_length - 1'd1))) begin
					builder_uartbone_next_state <= 1'd0;
				end else begin
					builder_uartbone_next_state <= 2'd3;
				end
			end
		end
		3'd5: begin
			main_motsoc_rx_source_ready <= 1'd0;
			main_motsoc_wishbone_stb <= 1'd1;
			main_motsoc_wishbone_we <= 1'd0;
			main_motsoc_wishbone_cyc <= 1'd1;
			if (main_motsoc_wishbone_ack) begin
				main_motsoc_data_uartbone_next_value6 <= main_motsoc_wishbone_dat_r;
				main_motsoc_data_uartbone_next_value_ce6 <= 1'd1;
				builder_uartbone_next_state <= 3'd6;
			end
		end
		3'd6: begin
			main_motsoc_rx_source_ready <= 1'd0;
			main_motsoc_tx_sink_valid <= 1'd1;
			if (main_motsoc_tx_sink_ready) begin
				main_motsoc_bytes_count_uartbone_next_value0 <= (main_motsoc_bytes_count + 1'd1);
				main_motsoc_bytes_count_uartbone_next_value_ce0 <= 1'd1;
				if ((main_motsoc_bytes_count == 2'd3)) begin
					main_motsoc_words_count_uartbone_next_value1 <= (main_motsoc_words_count + 1'd1);
					main_motsoc_words_count_uartbone_next_value_ce1 <= 1'd1;
					main_motsoc_address_uartbone_next_value4 <= (main_motsoc_address + main_motsoc_incr);
					main_motsoc_address_uartbone_next_value_ce4 <= 1'd1;
					if ((main_motsoc_words_count == (main_motsoc_length - 1'd1))) begin
						builder_uartbone_next_state <= 1'd0;
					end else begin
						builder_uartbone_next_state <= 3'd5;
					end
				end
			end
		end
		default: begin
			main_motsoc_is_ongoing <= 1'd1;
			main_motsoc_rx_source_ready <= 1'd1;
			main_motsoc_bytes_count_uartbone_next_value0 <= 1'd0;
			main_motsoc_bytes_count_uartbone_next_value_ce0 <= 1'd1;
			main_motsoc_words_count_uartbone_next_value1 <= 1'd0;
			main_motsoc_words_count_uartbone_next_value_ce1 <= 1'd1;
			if (main_motsoc_rx_source_valid) begin
				main_motsoc_cmd_uartbone_next_value2 <= main_motsoc_rx_source_payload_data;
				main_motsoc_cmd_uartbone_next_value_ce2 <= 1'd1;
				builder_uartbone_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_motsoc_done = (main_motsoc_count == 1'd0);
always @(*) begin
	builder_motsoc_wishbone_ack <= 1'd0;
	builder_motsoc_dat_w <= 32'd0;
	builder_motsoc_wishbone_dat_r <= 32'd0;
	builder_motsoc_adr <= 14'd0;
	builder_next_state <= 1'd0;
	builder_motsoc_we <= 1'd0;
	builder_next_state <= builder_state;
	case (builder_state)
		1'd1: begin
			builder_motsoc_wishbone_ack <= 1'd1;
			builder_motsoc_wishbone_dat_r <= builder_motsoc_dat_r;
			builder_next_state <= 1'd0;
		end
		default: begin
			builder_motsoc_dat_w <= builder_motsoc_wishbone_dat_w;
			if ((builder_motsoc_wishbone_cyc & builder_motsoc_wishbone_stb)) begin
				builder_motsoc_adr <= builder_motsoc_wishbone_adr;
				builder_motsoc_we <= (builder_motsoc_wishbone_we & (builder_motsoc_wishbone_sel != 1'd0));
				builder_next_state <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign main_motsoc_wishbone_dat_r = builder_shared_dat_r;
assign main_wb_bus_dat_r = builder_shared_dat_r;
assign main_motsoc_wishbone_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_wb_bus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_motsoc_wishbone_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_wb_bus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_wb_bus_cyc, main_motsoc_wishbone_cyc};
assign builder_slave_sel = (builder_shared_adr[29:14] == 1'd0);
assign builder_motsoc_wishbone_adr = builder_shared_adr;
assign builder_motsoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_motsoc_wishbone_sel = builder_shared_sel;
assign builder_motsoc_wishbone_stb = builder_shared_stb;
assign builder_motsoc_wishbone_we = builder_shared_we;
assign builder_motsoc_wishbone_cti = builder_shared_cti;
assign builder_motsoc_wishbone_bte = builder_shared_bte;
assign builder_motsoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel);
assign builder_shared_err = builder_motsoc_wishbone_err;
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_shared_dat_r <= 32'd0;
	builder_shared_ack <= 1'd0;
	builder_error <= 1'd0;
	builder_shared_ack <= builder_motsoc_wishbone_ack;
	builder_shared_dat_r <= ({32{builder_slave_sel_r}} & builder_motsoc_wishbone_dat_r);
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
		builder_shared_ack <= 1'd1;
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank0_stepper_x0_r = builder_interface0_bank_bus_dat_w[4:0];
always @(*) begin
	builder_csrbank0_stepper_x0_re <= 1'd0;
	builder_csrbank0_stepper_x0_we <= 1'd0;
	if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank0_stepper_x0_re <= builder_interface0_bank_bus_we;
		builder_csrbank0_stepper_x0_we <= (~builder_interface0_bank_bus_we);
	end
end
assign main_mode = main_storage[2:1];
assign main_invert_step = main_storage[3];
assign main_invert_dir = main_storage[4];
assign builder_csrbank0_stepper_x0_w = main_storage[4:0];
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank1_axis_x_position_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_position_re <= 1'd0;
	builder_csrbank1_axis_x_position_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank1_axis_x_position_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_position_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_home_position_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_home_position_we <= 1'd0;
	builder_csrbank1_axis_x_home_position_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank1_axis_x_home_position_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_home_position_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_speed_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_speed_we <= 1'd0;
	builder_csrbank1_axis_x_speed_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank1_axis_x_speed_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_speed_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_target_position0_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_target_position0_re <= 1'd0;
	builder_csrbank1_axis_x_target_position0_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csrbank1_axis_x_target_position0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_target_position0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_start_speed0_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_start_speed0_re <= 1'd0;
	builder_csrbank1_axis_x_start_speed0_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csrbank1_axis_x_start_speed0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_start_speed0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_acceleration0_r = builder_interface1_bank_bus_dat_w[19:0];
always @(*) begin
	builder_csrbank1_axis_x_acceleration0_we <= 1'd0;
	builder_csrbank1_axis_x_acceleration0_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csrbank1_axis_x_acceleration0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_axis_x_acceleration0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_push_motion0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_push_motion0_re <= 1'd0;
	builder_csrbank1_push_motion0_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csrbank1_push_motion0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_push_motion0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_home_done_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_home_done_we <= 1'd0;
	builder_csrbank1_home_done_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csrbank1_home_done_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_home_done_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_flush0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_flush0_we <= 1'd0;
	builder_csrbank1_flush0_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csrbank1_flush0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_flush0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_done_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_done_re <= 1'd0;
	builder_csrbank1_done_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 4'd9))) begin
		builder_csrbank1_done_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_done_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_ready_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_ready_re <= 1'd0;
	builder_csrbank1_ready_we <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 4'd10))) begin
		builder_csrbank1_ready_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_ready_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_sync_axis0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_sync_axis0_we <= 1'd0;
	builder_csrbank1_sync_axis0_re <= 1'd0;
	if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 4'd11))) begin
		builder_csrbank1_sync_axis0_re <= builder_interface1_bank_bus_we;
		builder_csrbank1_sync_axis0_we <= (~builder_interface1_bank_bus_we);
	end
end
assign builder_csrbank1_axis_x_position_w = main_position_status[19:0];
assign main_position_we = builder_csrbank1_axis_x_position_we;
assign builder_csrbank1_axis_x_home_position_w = main_home_position_status[19:0];
assign main_home_position_we = builder_csrbank1_axis_x_home_position_we;
assign builder_csrbank1_axis_x_speed_w = main_speed_status[19:0];
assign main_speed_we = builder_csrbank1_axis_x_speed_we;
assign builder_csrbank1_axis_x_target_position0_w = main_target_position_storage[19:0];
assign builder_csrbank1_axis_x_start_speed0_w = main_start_speed_storage[19:0];
assign builder_csrbank1_axis_x_acceleration0_w = main_acceleration_storage[19:0];
always @(*) begin
	main_axis_x_push <= 1'd0;
	if (main_push_motion_re) begin
		main_axis_x_push <= main_push_motion_storage;
	end
end
assign builder_csrbank1_push_motion0_w = main_push_motion_storage;
assign main_home_done_status = main_axis_x_home_done;
assign builder_csrbank1_home_done_w = main_home_done_status;
assign main_home_done_we = builder_csrbank1_home_done_we;
always @(*) begin
	main_axis_x_flush <= 1'd0;
	if (main_flush_re) begin
		main_axis_x_flush <= main_flush_storage;
	end
end
assign builder_csrbank1_flush0_w = main_flush_storage;
assign main_done_status = main_axis_x_done;
assign builder_csrbank1_done_w = main_done_status;
assign main_done_we = builder_csrbank1_done_we;
assign main_ready_status = main_axis_x_ready;
assign builder_csrbank1_ready_w = main_ready_status;
assign main_ready_we = builder_csrbank1_ready_we;
assign main_axis_x_sync = main_sync_axis_storage;
assign builder_csrbank1_sync_axis0_w = main_sync_axis_storage;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank2_enable0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank2_enable0_re <= 1'd0;
	builder_csrbank2_enable0_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank2_enable0_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_enable0_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_width0_r = builder_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank2_width0_we <= 1'd0;
	builder_csrbank2_width0_re <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank2_width0_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_width0_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_period0_r = builder_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csrbank2_period0_re <= 1'd0;
	builder_csrbank2_period0_we <= 1'd0;
	if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csrbank2_period0_re <= builder_interface2_bank_bus_we;
		builder_csrbank2_period0_we <= (~builder_interface2_bank_bus_we);
	end
end
assign builder_csrbank2_enable0_w = main_pwm_enable_storage;
assign builder_csrbank2_width0_w = main_pwm_width_storage[31:0];
assign builder_csrbank2_period0_w = main_pwm_period_storage[31:0];
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csrbank3_cnt_r = builder_interface3_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csrbank3_cnt_re <= 1'd0;
	builder_csrbank3_cnt_we <= 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csrbank3_cnt_re <= builder_interface3_bank_bus_we;
		builder_csrbank3_cnt_we <= (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_index_cnt_r = builder_interface3_bank_bus_dat_w[15:0];
always @(*) begin
	builder_csrbank3_index_cnt_re <= 1'd0;
	builder_csrbank3_index_cnt_we <= 1'd0;
	if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csrbank3_index_cnt_re <= builder_interface3_bank_bus_we;
		builder_csrbank3_index_cnt_we <= (~builder_interface3_bank_bus_we);
	end
end
assign builder_csrbank3_cnt_w = main_qei_cnt_status[15:0];
assign main_qei_cnt_we = builder_csrbank3_cnt_we;
assign builder_csrbank3_index_cnt_w = main_qei_index_cnt_status[15:0];
assign main_qei_index_cnt_we = builder_csrbank3_index_cnt_we;
assign builder_csr_interconnect_adr = builder_motsoc_adr;
assign builder_csr_interconnect_we = builder_motsoc_we;
assign builder_csr_interconnect_dat_w = builder_motsoc_dat_w;
assign builder_motsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r);
always @(*) begin
	builder_array_muxed0 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed0 <= main_motsoc_wishbone_adr;
		end
		default: begin
			builder_array_muxed0 <= main_wb_bus_adr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed1 <= main_motsoc_wishbone_dat_w;
		end
		default: begin
			builder_array_muxed1 <= main_wb_bus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed2 <= main_motsoc_wishbone_sel;
		end
		default: begin
			builder_array_muxed2 <= main_wb_bus_sel;
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed3 <= main_motsoc_wishbone_cyc;
		end
		default: begin
			builder_array_muxed3 <= main_wb_bus_cyc;
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed4 <= main_motsoc_wishbone_stb;
		end
		default: begin
			builder_array_muxed4 <= main_wb_bus_stb;
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed5 <= main_motsoc_wishbone_we;
		end
		default: begin
			builder_array_muxed5 <= main_wb_bus_we;
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed6 <= main_motsoc_wishbone_cti;
		end
		default: begin
			builder_array_muxed6 <= main_wb_bus_cti;
		end
	endcase
end
always @(*) begin
	builder_array_muxed7 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed7 <= main_motsoc_wishbone_bte;
		end
		default: begin
			builder_array_muxed7 <= main_wb_bus_bte;
		end
	endcase
end
assign main_motsoc_rx_rx = builder_regs1;
assign main_pwm_enable = main_pwm_enable_storage;
assign main_pwm_width = main_pwm_width_storage;
assign main_pwm_period = main_pwm_period_storage;

always @(posedge por_clk) begin
	main_int_rst <= sys_rst;
end

always @(posedge sys_clk_1) begin
	if (main_pwmperipheral_cycle_update) begin
		main_pwmperipheral_duty_cycle <= main_pwmperipheral_duty_cycle_storage;
	end
	if (main_pwmperipheral_up_cnt) begin
		if ((main_pwmperipheral_cnt == main_pwmperipheral_period_storage)) begin
			if (1'd0) begin
				main_pwmperipheral_up_cnt <= 1'd0;
				main_pwmperipheral_cnt <= (main_pwmperipheral_cnt - 1'd1);
			end else begin
				main_pwmperipheral_cnt <= 1'd0;
			end
		end else begin
			main_pwmperipheral_cnt <= (main_pwmperipheral_cnt + 1'd1);
		end
	end else begin
		if ((main_pwmperipheral_cnt == 1'd0)) begin
			main_pwmperipheral_cnt <= 1'd1;
			main_pwmperipheral_up_cnt <= 1'd1;
		end else begin
			main_pwmperipheral_cnt <= (main_pwmperipheral_cnt - 1'd1);
		end
	end
	main_qei_a_f <= {qei_a, main_qei_a_f[2:1]};
	main_qei_b_f <= {qei_b, main_qei_b_f[2:1]};
	case ({main_qei_b_f[1:0], main_qei_a_f[1:0]})
		2'd2: begin
			main_qei_cnt <= (main_qei_cnt - 1'd1);
		end
		3'd7: begin
			main_qei_cnt <= (main_qei_cnt + 1'd1);
		end
		4'd8: begin
			main_qei_cnt <= (main_qei_cnt + 1'd1);
		end
		4'd13: begin
			main_qei_cnt <= (main_qei_cnt - 1'd1);
		end
	endcase
	main_qei_i_f <= {main_qei_i_f[1:0], qei_i};
	if (((main_qei_i & main_qei_a) & main_qei_b)) begin
		main_qei_index_cnt <= main_qei_cnt;
	end
	if (main_motiongeneratoraxis_flush) begin
		main_motiongeneratoraxis_target_position <= main_motiongeneratoraxis_position;
		main_motiongeneratoraxis_speed_raw <= 1'd0;
	end else begin
		if ((~main_motiongeneratoraxis_done)) begin
			main_motiongeneratoraxis_cnt <= main_motiongeneratoraxis_C;
			if ((($signed({1'd0, (main_motiongeneratoraxis_speed == 1'd1)}) & main_motiongeneratoraxis_acceleration[19]) | ($signed({1'd0, (main_motiongeneratoraxis_speed == {20{1'd1}})}) & (~main_motiongeneratoraxis_acceleration[19])))) begin
				main_motiongeneratoraxis_speed_raw <= main_motiongeneratoraxis_speed_raw;
			end else begin
				main_motiongeneratoraxis_speed_raw <= (main_motiongeneratoraxis_speed_raw + main_motiongeneratoraxis_acceleration);
			end
		end else begin
			if (main_motiongeneratoraxis_sink_valid) begin
				main_motiongeneratoraxis_speed_raw <= {main_motiongeneratoraxis_sink_payload_start_speed, {20{main_motiongeneratoraxis_sink_payload_start_speed[19]}}};
				main_motiongeneratoraxis_target_position <= main_motiongeneratoraxis_sink_payload_target_position;
				main_motiongeneratoraxis_acceleration <= main_motiongeneratoraxis_sink_payload_acceleration;
			end
		end
	end
	if (main_motiongeneratoraxis_overflow) begin
		main_motiongeneratoraxis_position <= (main_motiongeneratoraxis_position + $signed({1'd0, 1'd1}));
	end else begin
		if (main_motiongeneratoraxis_underflow) begin
			main_motiongeneratoraxis_position <= (main_motiongeneratoraxis_position - $signed({1'd0, 1'd1}));
		end
	end
	if (main_up_cmd) begin
		if ((main_quad == 1'd0)) begin
			main_quad <= 1'd1;
		end else begin
			if ((main_quad == 1'd1)) begin
				main_quad <= 2'd3;
			end else begin
				if ((main_quad == 2'd2)) begin
					main_quad <= 1'd0;
				end else begin
					main_quad <= 2'd2;
				end
			end
		end
	end else begin
		if (main_down_cmd) begin
			if ((main_quad == 1'd0)) begin
				main_quad <= 2'd2;
			end else begin
				if ((main_quad == 1'd1)) begin
					main_quad <= 1'd0;
				end else begin
					if ((main_quad == 2'd2)) begin
						main_quad <= 2'd3;
					end else begin
						main_quad <= 1'd1;
					end
				end
			end
		end
	end
	builder_stepper_state <= builder_stepper_next_state;
	if (main_dir_t_stepper_next_value_ce0) begin
		main_dir_t <= main_dir_t_stepper_next_value0;
	end
	if (main_step_pulse_stepper_next_value_ce1) begin
		main_step_pulse <= main_step_pulse_stepper_next_value1;
	end
	if (((main_motiongeneratoraxis_sink_valid & main_motiongeneratoraxis_sink_ready) | main_axis_x_flush)) begin
		main_motion_valid <= 1'd0;
	end else begin
		if (main_axis_x_push) begin
			main_motion_valid <= 1'd1;
		end
	end
	{main_motsoc_tx_tick, main_motsoc_tx_phase} <= 24'd9895604;
	if (main_motsoc_tx_enable) begin
		{main_motsoc_tx_tick, main_motsoc_tx_phase} <= (main_motsoc_tx_phase + 24'd9895604);
	end
	builder_rs232phytx_state <= builder_rs232phytx_next_state;
	if (main_motsoc_tx_count_rs232phytx_next_value_ce0) begin
		main_motsoc_tx_count <= main_motsoc_tx_count_rs232phytx_next_value0;
	end
	if (main_motsoc_uartbone_tx_rs232phytx_next_value_ce1) begin
		uartbone_tx <= main_motsoc_uartbone_tx_rs232phytx_next_value1;
	end
	if (main_motsoc_tx_data_rs232phytx_next_value_ce2) begin
		main_motsoc_tx_data <= main_motsoc_tx_data_rs232phytx_next_value2;
	end
	main_motsoc_rx_rx_d <= main_motsoc_rx_rx;
	{main_motsoc_rx_tick, main_motsoc_rx_phase} <= 32'd2147483648;
	if (main_motsoc_rx_enable) begin
		{main_motsoc_rx_tick, main_motsoc_rx_phase} <= (main_motsoc_rx_phase + 24'd9895604);
	end
	builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
	if (main_motsoc_rx_count_rs232phyrx_next_value_ce0) begin
		main_motsoc_rx_count <= main_motsoc_rx_count_rs232phyrx_next_value0;
	end
	if (main_motsoc_rx_data_rs232phyrx_next_value_ce1) begin
		main_motsoc_rx_data <= main_motsoc_rx_data_rs232phyrx_next_value1;
	end
	builder_uartbone_state <= builder_uartbone_next_state;
	if (main_motsoc_bytes_count_uartbone_next_value_ce0) begin
		main_motsoc_bytes_count <= main_motsoc_bytes_count_uartbone_next_value0;
	end
	if (main_motsoc_words_count_uartbone_next_value_ce1) begin
		main_motsoc_words_count <= main_motsoc_words_count_uartbone_next_value1;
	end
	if (main_motsoc_cmd_uartbone_next_value_ce2) begin
		main_motsoc_cmd <= main_motsoc_cmd_uartbone_next_value2;
	end
	if (main_motsoc_length_uartbone_next_value_ce3) begin
		main_motsoc_length <= main_motsoc_length_uartbone_next_value3;
	end
	if (main_motsoc_address_uartbone_next_value_ce4) begin
		main_motsoc_address <= main_motsoc_address_uartbone_next_value4;
	end
	if (main_motsoc_incr_uartbone_next_value_ce5) begin
		main_motsoc_incr <= main_motsoc_incr_uartbone_next_value5;
	end
	if (main_motsoc_data_uartbone_next_value_ce6) begin
		main_motsoc_data <= main_motsoc_data_uartbone_next_value6;
	end
	if (main_motsoc_reset) begin
		main_motsoc_incr <= 1'd0;
		builder_uartbone_state <= 3'd0;
	end
	if (main_motsoc_wait) begin
		if ((~main_motsoc_done)) begin
			main_motsoc_count <= (main_motsoc_count - 1'd1);
		end
	end else begin
		main_motsoc_count <= 23'd5000000;
	end
	if (main_pwm_enable) begin
		main_pwm_counter <= (main_pwm_counter + 1'd1);
		if ((main_pwm_counter < main_pwm_width)) begin
			pwm <= 1'd1;
		end else begin
			pwm <= 1'd0;
		end
		if ((main_pwm_counter >= (main_pwm_period - 1'd1))) begin
			main_pwm_counter <= 1'd0;
		end
	end else begin
		main_pwm_counter <= 1'd0;
		pwm <= 1'd0;
	end
	builder_state <= builder_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank0_sel) begin
		case (builder_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface0_bank_bus_dat_r <= builder_csrbank0_stepper_x0_w;
			end
		endcase
	end
	if (builder_csrbank0_stepper_x0_re) begin
		main_storage[4:0] <= builder_csrbank0_stepper_x0_r;
	end
	main_re <= builder_csrbank0_stepper_x0_re;
	builder_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank1_sel) begin
		case (builder_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_position_w;
			end
			1'd1: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_home_position_w;
			end
			2'd2: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_speed_w;
			end
			2'd3: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_target_position0_w;
			end
			3'd4: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_start_speed0_w;
			end
			3'd5: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_axis_x_acceleration0_w;
			end
			3'd6: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_push_motion0_w;
			end
			3'd7: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_home_done_w;
			end
			4'd8: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_flush0_w;
			end
			4'd9: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_done_w;
			end
			4'd10: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_ready_w;
			end
			4'd11: begin
				builder_interface1_bank_bus_dat_r <= builder_csrbank1_sync_axis0_w;
			end
		endcase
	end
	main_position_re <= builder_csrbank1_axis_x_position_re;
	main_home_position_re <= builder_csrbank1_axis_x_home_position_re;
	main_speed_re <= builder_csrbank1_axis_x_speed_re;
	if (builder_csrbank1_axis_x_target_position0_re) begin
		main_target_position_storage[19:0] <= builder_csrbank1_axis_x_target_position0_r;
	end
	main_target_position_re <= builder_csrbank1_axis_x_target_position0_re;
	if (builder_csrbank1_axis_x_start_speed0_re) begin
		main_start_speed_storage[19:0] <= builder_csrbank1_axis_x_start_speed0_r;
	end
	main_start_speed_re <= builder_csrbank1_axis_x_start_speed0_re;
	if (builder_csrbank1_axis_x_acceleration0_re) begin
		main_acceleration_storage[19:0] <= builder_csrbank1_axis_x_acceleration0_r;
	end
	main_acceleration_re <= builder_csrbank1_axis_x_acceleration0_re;
	if (builder_csrbank1_push_motion0_re) begin
		main_push_motion_storage <= builder_csrbank1_push_motion0_r;
	end
	main_push_motion_re <= builder_csrbank1_push_motion0_re;
	main_home_done_re <= builder_csrbank1_home_done_re;
	if (builder_csrbank1_flush0_re) begin
		main_flush_storage <= builder_csrbank1_flush0_r;
	end
	main_flush_re <= builder_csrbank1_flush0_re;
	main_done_re <= builder_csrbank1_done_re;
	main_ready_re <= builder_csrbank1_ready_re;
	if (builder_csrbank1_sync_axis0_re) begin
		main_sync_axis_storage <= builder_csrbank1_sync_axis0_r;
	end
	main_sync_axis_re <= builder_csrbank1_sync_axis0_re;
	builder_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank2_sel) begin
		case (builder_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_enable0_w;
			end
			1'd1: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_width0_w;
			end
			2'd2: begin
				builder_interface2_bank_bus_dat_r <= builder_csrbank2_period0_w;
			end
		endcase
	end
	if (builder_csrbank2_enable0_re) begin
		main_pwm_enable_storage <= builder_csrbank2_enable0_r;
	end
	main_pwm_enable_re <= builder_csrbank2_enable0_re;
	if (builder_csrbank2_width0_re) begin
		main_pwm_width_storage[31:0] <= builder_csrbank2_width0_r;
	end
	main_pwm_width_re <= builder_csrbank2_width0_re;
	if (builder_csrbank2_period0_re) begin
		main_pwm_period_storage[31:0] <= builder_csrbank2_period0_r;
	end
	main_pwm_period_re <= builder_csrbank2_period0_re;
	builder_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csrbank3_sel) begin
		case (builder_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_cnt_w;
			end
			1'd1: begin
				builder_interface3_bank_bus_dat_r <= builder_csrbank3_index_cnt_w;
			end
		endcase
	end
	main_qei_cnt_re <= builder_csrbank3_cnt_re;
	main_qei_index_cnt_re <= builder_csrbank3_index_cnt_re;
	if (sys_rst_1) begin
		main_pwmperipheral_cnt <= 16'd0;
		main_pwmperipheral_up_cnt <= 1'd1;
		main_pwmperipheral_duty_cycle <= 16'd0;
		main_qei_cnt <= 16'd0;
		main_qei_a_f <= 3'd0;
		main_qei_b_f <= 3'd0;
		main_qei_i_f <= 3'd0;
		main_qei_index_cnt <= 16'd0;
		main_qei_cnt_re <= 1'd0;
		main_qei_index_cnt_re <= 1'd0;
		main_motiongeneratoraxis_acceleration <= 20'd0;
		main_motiongeneratoraxis_target_position <= 20'd0;
		main_motiongeneratoraxis_cnt <= 20'd0;
		main_motiongeneratoraxis_position <= 20'd0;
		main_motiongeneratoraxis_speed_raw <= 40'd0;
		main_storage <= 5'd0;
		main_re <= 1'd0;
		main_quad <= 2'd0;
		main_step_pulse <= 5'd0;
		main_dir_t <= 4'd1;
		main_position_re <= 1'd0;
		main_home_position_re <= 1'd0;
		main_speed_re <= 1'd0;
		main_target_position_storage <= 20'd0;
		main_target_position_re <= 1'd0;
		main_start_speed_storage <= 20'd0;
		main_start_speed_re <= 1'd0;
		main_acceleration_storage <= 20'd0;
		main_acceleration_re <= 1'd0;
		main_push_motion_storage <= 1'd0;
		main_push_motion_re <= 1'd0;
		main_home_done_re <= 1'd0;
		main_flush_storage <= 1'd0;
		main_flush_re <= 1'd0;
		main_done_re <= 1'd0;
		main_ready_re <= 1'd0;
		main_sync_axis_storage <= 1'd0;
		main_sync_axis_re <= 1'd0;
		main_motion_valid <= 1'd0;
		uartbone_tx <= 1'd0;
		main_motsoc_tx_tick <= 32'd0;
		main_motsoc_tx_phase <= 32'd0;
		main_motsoc_rx_tick <= 32'd0;
		main_motsoc_rx_phase <= 32'd0;
		main_motsoc_rx_rx_d <= 1'd0;
		main_motsoc_incr <= 1'd0;
		main_motsoc_count <= 23'd5000000;
		pwm <= 1'd0;
		main_pwm_enable_storage <= 1'd0;
		main_pwm_enable_re <= 1'd0;
		main_pwm_width_re <= 1'd0;
		main_pwm_period_re <= 1'd0;
		builder_stepper_state <= 2'd0;
		builder_rs232phytx_state <= 1'd0;
		builder_rs232phyrx_state <= 1'd0;
		builder_uartbone_state <= 3'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 1'd0;
		builder_count <= 20'd1000000;
		builder_state <= 1'd0;
	end
	builder_regs0 <= uartbone_rx;
	builder_regs1 <= builder_regs0;
end

endmodule
