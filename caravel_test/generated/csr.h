//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (d6084cd1) on 2021-06-14 16:01:24
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* pwm */
#define CSR_PWM_BASE (CSR_BASE + 0x0L)
#define CSR_PWM_ENABLE_ADDR (CSR_BASE + 0x0L)
#define CSR_PWM_ENABLE_SIZE 1
static inline uint32_t pwm_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void pwm_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_PWM_WIDTH_ADDR (CSR_BASE + 0x4L)
#define CSR_PWM_WIDTH_SIZE 1
static inline uint32_t pwm_width_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void pwm_width_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_PWM_PERIOD_ADDR (CSR_BASE + 0x8L)
#define CSR_PWM_PERIOD_SIZE 1
static inline uint32_t pwm_period_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}
static inline void pwm_period_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8L);
}

/* axis_x */
#define CSR_AXIS_X_BASE (CSR_BASE + 0x800L)
#define CSR_AXIS_X_STEPPER_X_ADDR (CSR_BASE + 0x800L)
#define CSR_AXIS_X_STEPPER_X_SIZE 1
static inline uint32_t axis_x_stepper_x_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void axis_x_stepper_x_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_AXIS_X_STEPPER_X_MODE_OFFSET 1
#define CSR_AXIS_X_STEPPER_X_MODE_SIZE 2
static inline uint32_t axis_x_stepper_x_mode_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 2)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t axis_x_stepper_x_mode_read(void) {
	uint32_t word = axis_x_stepper_x_read();
	return axis_x_stepper_x_mode_extract(word);
}
static inline uint32_t axis_x_stepper_x_mode_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 2)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void axis_x_stepper_x_mode_write(uint32_t plain_value) {
	uint32_t oldword = axis_x_stepper_x_read();
	uint32_t newword = axis_x_stepper_x_mode_replace(oldword, plain_value);
	axis_x_stepper_x_write(newword);
}
#define CSR_AXIS_X_STEPPER_X_INVERT_STEP_OFFSET 3
#define CSR_AXIS_X_STEPPER_X_INVERT_STEP_SIZE 1
static inline uint32_t axis_x_stepper_x_invert_step_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t axis_x_stepper_x_invert_step_read(void) {
	uint32_t word = axis_x_stepper_x_read();
	return axis_x_stepper_x_invert_step_extract(word);
}
static inline uint32_t axis_x_stepper_x_invert_step_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void axis_x_stepper_x_invert_step_write(uint32_t plain_value) {
	uint32_t oldword = axis_x_stepper_x_read();
	uint32_t newword = axis_x_stepper_x_invert_step_replace(oldword, plain_value);
	axis_x_stepper_x_write(newword);
}
#define CSR_AXIS_X_STEPPER_X_INVERT_DIR_OFFSET 4
#define CSR_AXIS_X_STEPPER_X_INVERT_DIR_SIZE 1
static inline uint32_t axis_x_stepper_x_invert_dir_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t axis_x_stepper_x_invert_dir_read(void) {
	uint32_t word = axis_x_stepper_x_read();
	return axis_x_stepper_x_invert_dir_extract(word);
}
static inline uint32_t axis_x_stepper_x_invert_dir_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void axis_x_stepper_x_invert_dir_write(uint32_t plain_value) {
	uint32_t oldword = axis_x_stepper_x_read();
	uint32_t newword = axis_x_stepper_x_invert_dir_replace(oldword, plain_value);
	axis_x_stepper_x_write(newword);
}

/* generator */
#define CSR_GENERATOR_BASE (CSR_BASE + 0x1000L)
#define CSR_GENERATOR_AXIS_X_POSITION_ADDR (CSR_BASE + 0x1000L)
#define CSR_GENERATOR_AXIS_X_POSITION_SIZE 1
static inline uint32_t generator_axis_x_position_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
#define CSR_GENERATOR_AXIS_X_HOME_POSITION_ADDR (CSR_BASE + 0x1004L)
#define CSR_GENERATOR_AXIS_X_HOME_POSITION_SIZE 1
static inline uint32_t generator_axis_x_home_position_read(void) {
	return csr_read_simple(CSR_BASE + 0x1004L);
}
#define CSR_GENERATOR_AXIS_X_SPEED_ADDR (CSR_BASE + 0x1008L)
#define CSR_GENERATOR_AXIS_X_SPEED_SIZE 1
static inline uint32_t generator_axis_x_speed_read(void) {
	return csr_read_simple(CSR_BASE + 0x1008L);
}
#define CSR_GENERATOR_AXIS_X_TARGET_POSITION_ADDR (CSR_BASE + 0x100cL)
#define CSR_GENERATOR_AXIS_X_TARGET_POSITION_SIZE 1
static inline uint32_t generator_axis_x_target_position_read(void) {
	return csr_read_simple(CSR_BASE + 0x100cL);
}
static inline void generator_axis_x_target_position_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x100cL);
}
#define CSR_GENERATOR_AXIS_X_START_SPEED_ADDR (CSR_BASE + 0x1010L)
#define CSR_GENERATOR_AXIS_X_START_SPEED_SIZE 1
static inline uint32_t generator_axis_x_start_speed_read(void) {
	return csr_read_simple(CSR_BASE + 0x1010L);
}
static inline void generator_axis_x_start_speed_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1010L);
}
#define CSR_GENERATOR_AXIS_X_ACCELERATION_ADDR (CSR_BASE + 0x1014L)
#define CSR_GENERATOR_AXIS_X_ACCELERATION_SIZE 1
static inline uint32_t generator_axis_x_acceleration_read(void) {
	return csr_read_simple(CSR_BASE + 0x1014L);
}
static inline void generator_axis_x_acceleration_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1014L);
}
#define CSR_GENERATOR_PUSH_MOTION_ADDR (CSR_BASE + 0x1018L)
#define CSR_GENERATOR_PUSH_MOTION_SIZE 1
static inline uint32_t generator_push_motion_read(void) {
	return csr_read_simple(CSR_BASE + 0x1018L);
}
static inline void generator_push_motion_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1018L);
}
#define CSR_GENERATOR_PUSH_MOTION_AXIS_X_PUSH_OFFSET 0
#define CSR_GENERATOR_PUSH_MOTION_AXIS_X_PUSH_SIZE 1
static inline uint32_t generator_push_motion_axis_x_push_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_push_motion_axis_x_push_read(void) {
	uint32_t word = generator_push_motion_read();
	return generator_push_motion_axis_x_push_extract(word);
}
static inline uint32_t generator_push_motion_axis_x_push_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void generator_push_motion_axis_x_push_write(uint32_t plain_value) {
	uint32_t oldword = generator_push_motion_read();
	uint32_t newword = generator_push_motion_axis_x_push_replace(oldword, plain_value);
	generator_push_motion_write(newword);
}
#define CSR_GENERATOR_HOME_DONE_ADDR (CSR_BASE + 0x101cL)
#define CSR_GENERATOR_HOME_DONE_SIZE 1
static inline uint32_t generator_home_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x101cL);
}
#define CSR_GENERATOR_HOME_DONE_AXIS_X_HOME_DONE_OFFSET 0
#define CSR_GENERATOR_HOME_DONE_AXIS_X_HOME_DONE_SIZE 1
static inline uint32_t generator_home_done_axis_x_home_done_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_home_done_axis_x_home_done_read(void) {
	uint32_t word = generator_home_done_read();
	return generator_home_done_axis_x_home_done_extract(word);
}
#define CSR_GENERATOR_FLUSH_ADDR (CSR_BASE + 0x1020L)
#define CSR_GENERATOR_FLUSH_SIZE 1
static inline uint32_t generator_flush_read(void) {
	return csr_read_simple(CSR_BASE + 0x1020L);
}
static inline void generator_flush_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1020L);
}
#define CSR_GENERATOR_FLUSH_AXIS_X_FLUSH_OFFSET 0
#define CSR_GENERATOR_FLUSH_AXIS_X_FLUSH_SIZE 1
static inline uint32_t generator_flush_axis_x_flush_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_flush_axis_x_flush_read(void) {
	uint32_t word = generator_flush_read();
	return generator_flush_axis_x_flush_extract(word);
}
static inline uint32_t generator_flush_axis_x_flush_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void generator_flush_axis_x_flush_write(uint32_t plain_value) {
	uint32_t oldword = generator_flush_read();
	uint32_t newword = generator_flush_axis_x_flush_replace(oldword, plain_value);
	generator_flush_write(newword);
}
#define CSR_GENERATOR_DONE_ADDR (CSR_BASE + 0x1024L)
#define CSR_GENERATOR_DONE_SIZE 1
static inline uint32_t generator_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x1024L);
}
#define CSR_GENERATOR_DONE_AXIS_X_DONE_OFFSET 0
#define CSR_GENERATOR_DONE_AXIS_X_DONE_SIZE 1
static inline uint32_t generator_done_axis_x_done_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_done_axis_x_done_read(void) {
	uint32_t word = generator_done_read();
	return generator_done_axis_x_done_extract(word);
}
#define CSR_GENERATOR_READY_ADDR (CSR_BASE + 0x1028L)
#define CSR_GENERATOR_READY_SIZE 1
static inline uint32_t generator_ready_read(void) {
	return csr_read_simple(CSR_BASE + 0x1028L);
}
#define CSR_GENERATOR_READY_AXIS_X_READY_OFFSET 0
#define CSR_GENERATOR_READY_AXIS_X_READY_SIZE 1
static inline uint32_t generator_ready_axis_x_ready_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_ready_axis_x_ready_read(void) {
	uint32_t word = generator_ready_read();
	return generator_ready_axis_x_ready_extract(word);
}
#define CSR_GENERATOR_SYNC_AXIS_ADDR (CSR_BASE + 0x102cL)
#define CSR_GENERATOR_SYNC_AXIS_SIZE 1
static inline uint32_t generator_sync_axis_read(void) {
	return csr_read_simple(CSR_BASE + 0x102cL);
}
static inline void generator_sync_axis_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x102cL);
}
#define CSR_GENERATOR_SYNC_AXIS_AXIS_X_SYNC_OFFSET 0
#define CSR_GENERATOR_SYNC_AXIS_AXIS_X_SYNC_SIZE 1
static inline uint32_t generator_sync_axis_axis_x_sync_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t generator_sync_axis_axis_x_sync_read(void) {
	uint32_t word = generator_sync_axis_read();
	return generator_sync_axis_axis_x_sync_extract(word);
}
static inline uint32_t generator_sync_axis_axis_x_sync_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void generator_sync_axis_axis_x_sync_write(uint32_t plain_value) {
	uint32_t oldword = generator_sync_axis_read();
	uint32_t newword = generator_sync_axis_axis_x_sync_replace(oldword, plain_value);
	generator_sync_axis_write(newword);
}

/* qei */
#define CSR_QEI_BASE (CSR_BASE + 0x1800L)
#define CSR_QEI_CNT_ADDR (CSR_BASE + 0x1800L)
#define CSR_QEI_CNT_SIZE 1
static inline uint32_t qei_cnt_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
#define CSR_QEI_INDEX_CNT_ADDR (CSR_BASE + 0x1804L)
#define CSR_QEI_INDEX_CNT_SIZE 1
static inline uint32_t qei_index_cnt_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}

#endif
